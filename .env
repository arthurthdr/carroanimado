OPENWEATHER_API_KEY=b35a17a87dd4682376499cc8ba4658ab
PORT=3001

# NOVA LINHA: String de Conexão do MongoDB Atlas
MONGO_URI_CRUD=mongodb+srv://arthurthdr2409:24092009thdr_@cluster0.ko44nal.mongodb.net/garagemDB?retryWrites=true&w=majority&appName=Cluster0
JWT_SECRET=este_e_um_segredo_muito_seguro_e_longo_para_meu_jwt_123456```
Isso é muito mais seguro do que deixar o segredo no código.

---

### **Fase 3: O Guardião da Garagem (Middleware)**

Agora, vamos criar o "guardião" que vai ficar na porta das rotas de veículos e só deixar entrar quem tiver a chave mágica.

**Sua Ação:**
1.  Crie uma nova pasta na raiz do seu projeto chamada `middleware`.
2.  Dentro dessa pasta, crie um arquivo chamado `auth.js`.

**Arquivo: `middleware/auth.js` (Novo Arquivo)**```javascript
import jwt from 'jsonwebtoken';

const authMiddleware = (req, res, next) => {
    // 1. Pegar o token do cabeçalho
    const authHeader = req.header('Authorization');

    if (!authHeader) {
        return res.status(401).json({ error: 'Acesso negado. Nenhum token fornecido.' });
    }

    // O cabeçalho vem como "Bearer TOKEN_LONGO_AQUI"
    // Nós queremos apenas a segunda parte (o token)
    const tokenParts = authHeader.split(' ');
    if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
        return res.status(401).json({ error: 'Formato de token inválido.' });
    }
    const token = tokenParts[1];

    try {
        // 2. Verificar se o token é válido
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'SEGREDO_SUPER_SECRETO');
        
        // 3. Se for válido, anexar o ID do usuário à requisição
        req.userId = decoded.userId;

        // 4. Deixar a requisição passar para a próxima etapa
        next();
    } catch (ex) {
        res.status(401).json({ error: 'Token inválido.' });
    }
};

export default authMiddleware;